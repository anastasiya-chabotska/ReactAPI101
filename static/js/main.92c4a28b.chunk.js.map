{"version":3,"sources":["components/GifCard.jsx","components/SearchBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["GifCard","props","className","src","url","Search","updateSearch","event","setState","searchKey","target","value","random","fetch","then","response","json","data","update","catch","error","console","search","searchTerm","trending","state","type","placeholder","onChange","this","onClick","React","Component","App","updateData","bind","newData","map","item","index","images","original","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAQeA,G,MANC,SAACC,GAAD,OACd,qBAAKC,UAAU,UAAf,SACE,qBAAKC,IAAKF,EAAMG,UCiFLC,E,kDAjFb,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IAORK,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,UAAWF,EAAMG,OAAOC,SATvB,EAYnBC,OAAS,WACPC,MAAM,iFAGHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACL,EAAKP,SAAS,CAAES,KAAMF,EAASE,OAE/B,EAAKhB,MAAMiB,OAAO,CAACH,EAASE,UAE7BE,OAAM,SAACC,GACNC,QAAQD,MAAMA,OAzBD,EA6BnBE,OAAS,SAACf,GACR,IAAIgB,EAAahB,EAAMG,OAAOC,MAE9BE,MAAM,0CAAD,OACuCU,EADvC,8CAGFT,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACL,EAAKP,SAAS,CAAES,KAAMF,EAASE,OAE/B,EAAKhB,MAAMiB,OAAOH,EAASE,SAE5BE,OAAM,SAACC,GACNC,QAAQD,MAAMA,OA5CD,EAgDnBI,SAAW,WACTX,MAAM,mFAGHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACL,EAAKd,MAAMiB,OAAOH,EAASE,SAG5BE,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,OAvDlC,EAAKK,MAAQ,CACXhB,UAAW,GACXQ,KAAM,IAJS,E,qDA4DjB,OACE,sBAAKf,UAAU,SAAf,UACE,uBACEwB,KAAK,OACLC,YAAY,eACZC,SAAUC,KAAKvB,eAEjB,wBAAQwB,QAASD,KAAKP,OAAQX,MAAOkB,KAAKJ,MAAMhB,UAAhD,oBAIA,wBAAQqB,QAASD,KAAKjB,OAAQD,MAAM,SAApC,wBAIA,wBAAQmB,QAASD,KAAKL,SAAtB,6B,GA5EaO,IAAMC,WCgDZC,E,kDA7Cb,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IAEDwB,MAAQ,CACXR,KAAM,IAGR,EAAKiB,WAAa,EAAKA,WAAWC,KAAhB,gBAPD,E,uDAWRC,GACTP,KAAKrB,SAAS,CAAES,KAAMmB,M,0CAIH,IAAD,OAClBvB,MAAM,mFAGHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACL,EAAKP,SAAS,CAAES,KAAMF,EAASE,UAGhCE,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,Q,+BAIlC,OACE,gCACE,qBAAKlB,UAAU,MAAf,SACE,cAAC,EAAD,CAAWgB,OAAQW,KAAKK,eAG1B,qBAAKhC,UAAU,UAAf,SACG2B,KAAKJ,MAAMR,KAAKoB,KAAI,SAACC,EAAMC,GAAP,OACnB,cAAC,EAAD,CAAqBnC,IAAKkC,EAAKE,OAAOC,SAASrC,KAAjCmC,e,GAtCRP,aCOHU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.92c4a28b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst GifCard = (props) => (\n  <div className=\"gifcard\">\n    <img src={props.url} />\n  </div>\n);\n\nexport default GifCard;\n","import React from \"react\";\nimport GifCard from \"./GifCard\";\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchKey: \"\",\n      data: [],\n    };\n  }\n\n  updateSearch = (event) => {\n    this.setState({ searchKey: event.target.value });\n  };\n\n  random = () => {\n    fetch(\n      `https://api.giphy.com/v1/gifs/random?api_key=bYFMRHm7P79nLgVnPaLhYwOxbIgn3CdZ`\n    )\n      .then((response) => {\n        return response.json();\n      })\n      .then((response) => {\n        this.setState({ data: response.data });\n        //update data in parent App component, turn into array to allow mapping\n        this.props.update([response.data]);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  search = (event) => {\n    let searchTerm = event.target.value;\n\n    fetch(\n      `https://api.giphy.com/v1/gifs/search?q=${searchTerm}&api_key=bYFMRHm7P79nLgVnPaLhYwOxbIgn3CdZ`\n    )\n      .then((response) => {\n        return response.json();\n      })\n      .then((response) => {\n        this.setState({ data: response.data });\n        //update data in parent App component\n        this.props.update(response.data);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  trending = () => {\n    fetch(\n      `https://api.giphy.com/v1/gifs/trending?api_key=bYFMRHm7P79nLgVnPaLhYwOxbIgn3CdZ`\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        this.props.update(response.data);\n      })\n\n      .catch((error) => console.error(error));\n  };\n  render() {\n    return (\n      <div className=\"search\">\n        <input\n          type=\"text\"\n          placeholder=\"Search a Gif\"\n          onChange={this.updateSearch}\n        />\n        <button onClick={this.search} value={this.state.searchKey}>\n          Search\n        </button>\n\n        <button onClick={this.random} value=\"random\">\n          Random GIF\n        </button>\n\n        <button onClick={this.trending}>Trending</button>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport GifCard from \"./components/GifCard\";\nimport Searchbar from \"./components/SearchBar\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [],\n    };\n\n    this.updateData = this.updateData.bind(this);\n  }\n\n  //function to be called from SearchBar component to update the data state\n  updateData(newData) {\n    this.setState({ data: newData });\n  }\n\n  //display trending when component mounts\n  componentDidMount() {\n    fetch(\n      `https://api.giphy.com/v1/gifs/trending?api_key=iCou32qYmtidVoNOAQl5QJtlpLVRNfzk`\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        this.setState({ data: response.data });\n      })\n\n      .catch((error) => console.error(error));\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"nav\">\n          <Searchbar update={this.updateData} />\n        </div>\n\n        <div className=\"display\">\n          {this.state.data.map((item, index) => (\n            <GifCard key={index} url={item.images.original.url} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}